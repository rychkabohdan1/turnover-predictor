import React, { useState, useEffect } from 'react';
import {
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  Button,
  TextField,
  Box,
  FormControl,
  InputLabel,
  Select,
  MenuItem,
  Chip,
  Typography,
  CircularProgress,
  Slider,
  Divider
} from '@mui/material';

interface Employee {
  _id: string;
  name: string;
  first_name: string;
  last_name: string;
  department: string;
  position: string;
  risk_level: string;
  turnover_probability: number;
  email: string;
  hire_date: string;
  salary: number;
  performance_score: number;
  last_evaluation_date: string;
  projects: string[];
  skills: string[];
  age?: number;
  years_of_experience?: number;
  work_hours?: number;
  projects_completed?: number;
  training_hours?: number;
}

interface RetentionAdvice {
  factor: string;
  impact: number;
  advice: string;
}

interface RetentionRecommendation {
  factor: string;
  current_value: number;
  recommended_value: number;
  estimated_impact: number;
  action: string;
  explanation: string;
}

interface RetentionRecommendationResponse {
  employee_id: string;
  current_probability: number;
  current_risk_level: string;
  estimated_new_probability: number;
  estimated_new_risk_level: string;
  recommendations: RetentionRecommendation[];
  message: string;
}

interface EditEmployeeDialogProps {
  open: boolean;
  employee: Employee | null;
  onClose: () => void;
  onSave: (employee: Employee) => Promise<void>;
  isNewEmployee?: boolean;
}

const DEPARTMENTS = ['Engineering', 'Sales', 'Marketing', 'HR', 'Finance', 'Operations', 'IT'];

export const EditEmployeeDialog: React.FC<EditEmployeeDialogProps> = ({
  open,
  employee,
  onClose,
  onSave,
  isNewEmployee = false
}) => {
  const [formData, setFormData] = useState<Employee | null>(null);
  const [originalEmployee, setOriginalEmployee] = useState<Employee | null>(null);
  const [loading, setLoading] = useState(false);
  const [recommendationsLoading, setRecommendationsLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [retentionAdvice, setRetentionAdvice] = useState<RetentionAdvice[]>([]);
  const [apiRecommendations, setApiRecommendations] = useState<RetentionRecommendationResponse | null>(null);
  const [updateTimer, setUpdateTimer] = useState<NodeJS.Timeout | null>(null);


  const generateRetentionAdvice = async (employeeData: Employee) => {
    try {


      const advice: RetentionAdvice[] = [];

      if (employeeData.performance_score < 3.5) {
        advice.push({
          factor: 'Performance Score',
          impact: 30,
          advice: 'Consider providing regular feedback and performance improvement plans'
        });
      }

      if ((employeeData.training_hours || 0) < 15) {
        advice.push({
          factor: 'Training Hours',
          impact: 25,
          advice: 'Increase training opportunities by at least 10 hours annually'
        });
      }

      if (employeeData.salary < 25000) {
        advice.push({
          factor: 'Salary',
          impact: 40,
          advice: 'Review compensation package to ensure it is competitive in the market'
        });
      }

      if ((employeeData.work_hours || 0) > 45) {
        advice.push({
          factor: 'Work Hours',
          impact: 20,
          advice: 'Consider work-life balance initiatives to reduce burnout'
        });
      }

      setRetentionAdvice(advice);
    } catch (err) {
      console.error('Failed to generate retention advice:', err);
    }
  };


  useEffect(() => {
    if (employee) {
      setFormData(employee);
      setOriginalEmployee(JSON.parse(JSON.stringify(employee)));
      fetchRetentionRecommendations(employee._id);
    } else if (isNewEmployee) {
      // Initialize with default values for a new employee
      const today = new Date().toISOString().split('T')[0];
      setFormData({
        _id: '', // Will be generated by the backend
        name: '',
        first_name: '',
        last_name: '',
        department: 'Engineering',
        position: '',
        risk_level: '',
        turnover_probability: 0,
        email: '',
        hire_date: today,
        salary: 30000,
        performance_score: 3.0,
        last_evaluation_date: today,
        projects: [],
        skills: [],
        age: 30,
        years_of_experience: 3,
        work_hours: 40,
        projects_completed: 0,
        training_hours: 20
      });
      setOriginalEmployee(null);
      setApiRecommendations(null);
      setRetentionAdvice([]);
    } else {
      setFormData(null);
      setOriginalEmployee(null);
      setApiRecommendations(null);
      setRetentionAdvice([]);
    }
  }, [employee, isNewEmployee, open]);


  useEffect(() => {
    if (formData && formData._id && originalEmployee) {

      const hasChanges = 
        formData.salary !== originalEmployee.salary ||
        formData.performance_score !== originalEmployee.performance_score ||
        formData.work_hours !== originalEmployee.work_hours ||
        formData.training_hours !== originalEmployee.training_hours ||
        formData.department !== originalEmployee.department;
      
      if (hasChanges) {

        if (updateTimer) {
          clearTimeout(updateTimer);
        }
        
        const timer = setTimeout(() => {
          updatePredictions(formData);
        }, 300);
        
        setUpdateTimer(timer);
      }
    }
  }, [formData?.salary, formData?.performance_score, formData?.work_hours, formData?.training_hours, formData?.department]);

  const fetchRetentionRecommendations = async (employeeId: string) => {
    try {
      setRecommendationsLoading(true);
      const response = await fetch('http://localhost:5000/api/retention-recommendations', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${localStorage.getItem('token')}`
        },
        body: JSON.stringify({ employee_id: employeeId })
      });

      if (!response.ok) {
        throw new Error('Failed to fetch retention recommendations');
      }

      const data = await response.json();
      setApiRecommendations(data);
    } catch (err) {
      console.error('Failed to fetch retention recommendations:', err);

      if (formData) {
        generateRetentionAdvice(formData);
      }
    } finally {
      setRecommendationsLoading(false);
    }
  };


  const updatePredictions = async (updatedFormData: Employee) => {
    if (!updatedFormData || ((!updatedFormData._id || !originalEmployee) && !isNewEmployee)) return;
    
    // Skip prediction updates for new employees
    if (isNewEmployee) return;
    
    try {
      setRecommendationsLoading(true);
      const response = await fetch('http://localhost:5000/api/retention-recommendations', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${localStorage.getItem('token')}`
        },
        body: JSON.stringify({ 
          employee_id: updatedFormData._id,

          current_values: {
            salary: updatedFormData.salary,
            performance_score: updatedFormData.performance_score,
            work_hours: updatedFormData.work_hours,
            training_hours: updatedFormData.training_hours,
            department: updatedFormData.department
          },

          original_values: originalEmployee ? {
            salary: originalEmployee.salary,
            performance_score: originalEmployee.performance_score,
            work_hours: originalEmployee.work_hours,
            training_hours: originalEmployee.training_hours,
            department: originalEmployee.department
          } : null
        })
      });

      if (!response.ok) {
        throw new Error('Failed to update predictions');
      }

      const data = await response.json();
      console.log('Updated recommendations received:', data);
      setApiRecommendations(data);
    } catch (err) {
      console.error('Failed to update predictions:', err);

    } finally {
      setRecommendationsLoading(false);
    }
  };

  if (!formData) return null;

  const handleChange = (field: keyof Employee) => (
    event: React.ChangeEvent<HTMLInputElement | { value: unknown }>
  ) => {
    const value = event.target.value;
    const updatedFormData = {
      ...formData,
      [field]: value,

      ...(field === 'first_name' || field === 'last_name'
        ? { name: field === 'first_name' 
              ? `${value} ${formData.last_name}` 
              : `${formData.first_name} ${value}` }
        : {})
    };
    
    setFormData(updatedFormData);
  };

  const handleSliderChange = (field: keyof Employee) => (
    event: Event,
    newValue: number | number[]
  ) => {
    const updatedFormData = {
      ...formData,
      [field]: newValue as number
    };
    
    setFormData(updatedFormData);
  };


  const handleSliderChangeCommitted = (field: keyof Employee) => (
    event: React.SyntheticEvent | Event,
    value: number | number[]
  ) => {

  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!formData) return;

    try {
      setLoading(true);
      setError(null);
      await onSave(formData);
      onClose();
    } catch (err) {
      setError(err instanceof Error ? err.message : 'Failed to save employee');
    } finally {
      setLoading(false);
    }
  };

  return (
    <Dialog 
      open={open} 
      onClose={onClose} 
      maxWidth="md" 
      fullWidth
      PaperProps={{ 
        sx: { maxHeight: '90vh' } 
      }}
    >
      <DialogTitle>{isNewEmployee ? 'Add New Employee' : 'Edit Employee Information'}</DialogTitle>
      <form onSubmit={handleSubmit}>
        <DialogContent dividers>
          <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 2 }}>
            {/* First Name */}
            <Box sx={{ 
              flex: { xs: '1 1 100%', sm: '1 1 calc(50% - 8px)' }
            }}>
              <TextField
                fullWidth
                label="First Name"
                value={formData.first_name}
                onChange={handleChange('first_name')}
                required
              />
            </Box>
            
            {/* Last Name */}
            <Box sx={{ 
              flex: { xs: '1 1 100%', sm: '1 1 calc(50% - 8px)' }
            }}>
              <TextField
                fullWidth
                label="Last Name"
                value={formData.last_name}
                onChange={handleChange('last_name')}
                required
              />
            </Box>
            
            {/* Email */}
            <Box sx={{ 
              flex: '1 1 100%' 
            }}>
              <TextField
                fullWidth
                label="Email"
                value={formData.email}
                onChange={handleChange('email')}
                required
                type="email"
              />
            </Box>
            
            {/* Position */}
            <Box sx={{ 
              flex: '1 1 100%'
            }}>
              <TextField
                fullWidth
                label="Position"
                value={formData?.position || ''}
                onChange={handleChange('position')}
                required
              />
            </Box>
            
            {/* Retention Factors Section */}
            <Box sx={{ width: '100%', mt: 2 }}>
              <Divider sx={{ my: 2 }} />
              <Typography variant="h6" gutterBottom>
                Retention Factors
              </Typography>
              <Typography variant="body2" color="text.secondary" paragraph>
                Adjust these factors to see how they might affect employee retention.
              </Typography>
            </Box>

            {/* Department - moved to retention factors section */}
            <Box sx={{ 
              flex: { xs: '1 1 100%', sm: '1 1 calc(50% - 8px)' }
            }}>
              <FormControl fullWidth>
                <InputLabel>Department</InputLabel>
                <Select
                  value={formData.department}
                  onChange={(event) => {
                    const value = event.target.value;
                    const updatedFormData = {
                      ...formData,
                      department: value as string
                    };
                    setFormData(updatedFormData);
                    updatePredictions(updatedFormData);
                  }}
                  label="Department"
                  required
                >
                  {DEPARTMENTS.map((dept) => (
                    <MenuItem key={dept} value={dept}>
                      {dept}
                    </MenuItem>
                  ))}
                </Select>
              </FormControl>
            </Box>

            {/* Salary */}
            <Box sx={{ 
              flex: { xs: '1 1 100%', sm: '1 1 calc(50% - 8px)' }
            }}>
              <TextField
                fullWidth
                label="Salary"
                value={formData.salary}
                onChange={handleChange('salary')}
                required
                type="number"
                inputProps={{ min: 0 }}
              />
            </Box>
            
            {/* Performance Score */}
            <Box sx={{ 
              flex: { xs: '1 1 100%', sm: '1 1 calc(50% - 8px)' }
            }}>
              <TextField
                fullWidth
                label="Performance Score (0-5)"
                value={formData.performance_score}
                onChange={handleChange('performance_score')}
                required
                type="number"
                inputProps={{ min: 0, max: 5, step: 0.1 }}
              />
            </Box>
            
            {/* Age - moved lower in form and paired with Work Hours */}
            <Box sx={{ 
              flex: { xs: '1 1 100%', sm: '1 1 calc(50% - 8px)' }
            }}>
              <TextField
                fullWidth
                label="Age"
                value={formData?.age || 30}
                InputProps={{
                  readOnly: true,
                }}
                helperText="Age cannot be modified"
                sx={{ '& .MuiInputBase-input.Mui-disabled': { 
                  WebkitTextFillColor: 'rgba(0, 0, 0, 0.87)',
                  fontWeight: 'medium'
                }}}
              />
            </Box>
            
            {/* Work Hours Slider */}
            <Box sx={{ 
              flex: { xs: '1 1 100%', sm: '1 1 calc(50% - 8px)' }
            }}>
              <Typography id="hours-slider" gutterBottom>
                Work Hours per Week: {formData.work_hours}
              </Typography>
              <Slider
                value={formData.work_hours || 40}
                onChange={handleSliderChange('work_hours')}
                onChangeCommitted={handleSliderChangeCommitted('work_hours')}
                aria-labelledby="hours-slider"
                valueLabelDisplay="auto"
                step={1}
                marks
                min={20}
                max={60}
              />
            </Box>
            
            {/* Training Hours Slider */}
            <Box sx={{ 
              flex: { xs: '1 1 100%', sm: '1 1 calc(50% - 8px)' }
            }}>
              <Typography id="training-slider" gutterBottom>
                Training Hours per Year: {formData.training_hours}
              </Typography>
              <Slider
                value={formData.training_hours || 10}
                onChange={handleSliderChange('training_hours')}
                onChangeCommitted={handleSliderChangeCommitted('training_hours')}
                aria-labelledby="training-slider"
                valueLabelDisplay="auto"
                step={5}
                marks
                min={0}
                max={100}
              />
            </Box>

            {/* API Recommendations */}
            {apiRecommendations && apiRecommendations.recommendations.length > 0 && (
              <Box sx={{ width: '100%' }}>
                <Box sx={{ mt: 2, mb: 2, p: 2, bgcolor: 'background.paper', borderRadius: 1, border: '1px solid #e0e0e0' }}>
                  <Typography variant="h6" gutterBottom>
                    Retention Recommendations
                  </Typography>
                  
                  <Box sx={{ 
                    display: 'grid', 
                    gridTemplateColumns: 'repeat(3, 1fr)', 
                    mb: 2,
                    gap: 2
                  }}>
                    <Box sx={{ display: 'flex', flexDirection: 'column', alignItems: 'center' }}>
                      <Typography variant="subtitle2">Current Risk:</Typography>
                      <Box sx={{ display: 'flex', alignItems: 'center', mt: 1 }}>
                        <Chip 
                          label={`${apiRecommendations.current_risk_level}`} 
                          color={
                            apiRecommendations.current_risk_level.toLowerCase().includes('high') ? 'error' :
                            apiRecommendations.current_risk_level.toLowerCase().includes('medium') ? 'warning' : 'success'
                          }
                          size="small" 
                          sx={{ mr: 1 }}
                        />
                        <Typography variant="body2" fontWeight="bold">
                          {(apiRecommendations.current_probability * 100).toFixed(1)}%
                        </Typography>
                      </Box>
                    </Box>
                    
                    <Box sx={{ display: 'flex', flexDirection: 'column', alignItems: 'center' }}>
                      <Typography variant="subtitle2">After Changes:</Typography>
                      <Box sx={{ display: 'flex', alignItems: 'center', mt: 1 }}>
                        <Chip 
                          label={`${apiRecommendations.estimated_new_risk_level}`} 
                          color={
                            apiRecommendations.estimated_new_risk_level.toLowerCase().includes('high') ? 'error' :
                            apiRecommendations.estimated_new_risk_level.toLowerCase().includes('medium') ? 'warning' : 'success'
                          } 
                          size="small" 
                          sx={{ mr: 1 }}
                        />
                        <Typography variant="body2" fontWeight="bold">
                          {(apiRecommendations.estimated_new_probability * 100).toFixed(1)}%
                        </Typography>
                      </Box>
                    </Box>
                    
                    <Box sx={{ display: 'flex', flexDirection: 'column', alignItems: 'center' }}>
                      <Typography variant="subtitle2">Improvement:</Typography>
                      <Box sx={{ display: 'flex', alignItems: 'center', mt: 1 }}>
                        <Chip 
                          label={`${((apiRecommendations.current_probability - apiRecommendations.estimated_new_probability) * 100).toFixed(1)}%`} 
                          color="primary" 
                          size="small" 
                        />
                      </Box>
                    </Box>
                  </Box>
                  
                  {/* Filter recommendations to only show ones with clear numerical changes and non-zero impact */}
                  {apiRecommendations.recommendations
                    .filter(item => {
                      return (
                        item.current_value !== undefined && 
                        item.recommended_value !== undefined && 
                        item.current_value !== item.recommended_value &&
                        item.estimated_impact !== 0
                      );
                    })
                    .map((item, index) => (
                      <Box key={index} sx={{ mb: 2 }}>
                        <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
                          <Typography variant="subtitle1">{item.factor}</Typography>
                          <Chip 
                            label={`Impact: ${Math.abs(item.estimated_impact * 100).toFixed(0)}%`} 
                            color="primary" 
                            size="small" 
                          />
                        </Box>
                        <Typography variant="body2" sx={{ mb: 0.5, fontWeight: 'bold' }}>
                          {item.action}
                        </Typography>
                        <Typography variant="body2" color="text.secondary">
                          {item.explanation}
                        </Typography>
                        {index < apiRecommendations.recommendations
                          .filter(item => 
                            item.current_value !== undefined && 
                            item.recommended_value !== undefined && 
                            item.current_value !== item.recommended_value &&
                            item.estimated_impact !== 0
                          ).length - 1 && 
                          <Divider sx={{ my: 1 }} />
                        }
                      </Box>
                    ))
                  }

                  {apiRecommendations.recommendations.filter(item => 
                    item.current_value !== undefined && 
                    item.recommended_value !== undefined && 
                    item.current_value !== item.recommended_value &&
                    item.estimated_impact !== 0
                  ).length === 0 && (
                    <Typography variant="body2" color="text.secondary" align="center" sx={{ my: 2 }}>
                      No significant recommendations available.
                    </Typography>
                  )}
                </Box>
              </Box>
            )}
            
            {/* Client-side Recommendations (fallback) */}
            {!apiRecommendations && retentionAdvice.length > 0 && (
              <Box sx={{ width: '100%' }}>
                <Box sx={{ mt: 2, mb: 2, p: 2, bgcolor: 'background.paper', borderRadius: 1, border: '1px solid #e0e0e0' }}>
                  <Typography variant="h6" gutterBottom>
                    Retention Improvement Advice
                  </Typography>
                  {retentionAdvice.map((item, index) => (
                    <Box key={index} sx={{ mb: 1 }}>
                      <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
                        <Typography variant="subtitle1">{item.factor}</Typography>
                        <Chip 
                          label={`Impact: ${item.impact}%`} 
                          color={item.impact > 30 ? "primary" : "default"} 
                          size="small" 
                        />
                      </Box>
                      <Typography variant="body2" color="text.secondary">
                        {item.advice}
                      </Typography>
                      {index < retentionAdvice.length - 1 && <Divider sx={{ my: 1 }} />}
                    </Box>
                  ))}
                </Box>
              </Box>
            )}

            {/* Loading indicator */}
            {recommendationsLoading && (
              <Box sx={{ width: '100%', display: 'flex', justifyContent: 'center', my: 3 }}>
                <CircularProgress size={30} />
              </Box>
            )}

            {/* Error message */}
            {error && (
              <Box sx={{ width: '100%', mt: 2 }}>
                <Chip color="error" label={error} />
              </Box>
            )}
          </Box>
        </DialogContent>
        <DialogActions>
          <Button onClick={onClose}>Cancel</Button>
          <Button
            type="submit"
            variant="contained"
            color="primary"
            disabled={loading}
          >
            {loading ? <CircularProgress size={24} /> : 'Save'}
          </Button>
        </DialogActions>
      </form>
    </Dialog>
  );
};

export default EditEmployeeDialog;